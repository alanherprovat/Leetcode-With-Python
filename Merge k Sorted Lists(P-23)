#time complexity is O(nlogk) as it uses divide and concure approach and as we introduce new list here space complexity will be O(n)


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if not lists and len(lists)==0 :# chcking Empty list and list with length 0
            return None
        while(len(lists)>1):
            temp=[]
            for i in range(0,len(lists),2):
                
                l1=lists[i]
                l2=lists[i+1] if (i+1)<len(lists) else None
                temp.append(self.merge2list(l1,l2))
                
            lists=temp
        return lists[0]
            
    def merge2list(self,l1,l2):
        dummy=ListNode()
        ta=dummy
        while l1 and l2:
            if(l1.val<l2.val):
                ta.next=l1
                l1=l1.next
            else:
                ta.next=l2
                l2=l2.next
            ta=ta.next
        if l1:
            ta.next=l1
        if l2:
            ta.next=l2
        return dummy.next
    
